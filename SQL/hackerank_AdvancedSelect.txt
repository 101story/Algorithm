
문제)

Type of Triangle

Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

- Equilateral: It's a triangle with 3 sides of equal length.
- Isosceles: It's a triangle with 3 sides of equal length.
- Scalene: It's a triangle with 3 sides of differing lengths.
- Not A Triangle: The given values of A, B, and C don't form a triangle.


제출 답 >>>

select if(A+B<=C or B+C<=A or C+A<=B, "Not A Triangle", 
    if(A=B and B=C , "Equilateral", 
    if(A=B or B=C or A=C, "Isosceles", "Scalene"))) from TRIANGLES;

SELECT 
	CASE WHEN A + B > C AND A + C > B AND B + C > A THEN 
	CASE WHEN A = B AND B = C THEN 'Equilateral' 
		WHEN A = B OR B = C OR A = C THEN 'Isosceles' 
		ELSE 'Scalene' 
		END 
	ELSE 'Not A Triangle' 
	END FROM TRIANGLES;

참고 
https://dev.mysql.com/doc/refman/5.7/en/control-flow-functions.html
https://dev.mysql.com/doc/refman/5.7/en/logical-operators.html

------------------------------

문제) The PADS

Generate the following two result sets:

Query an alphabetically ordered list of all names in OCCUPATIONS, immediately followed by the first letter of each profession as a parenthetical (i.e.: enclosed in parentheses). For example: AnActorName(A), ADoctorName(D), AProfessorName(P), and ASingerName(S).
Query the number of ocurrences of each occupation in OCCUPATIONS. Sort the occurrences in ascending order, and output them in the following format: 

There are a total of [occupation_count] [occupation]s.
where [occupation_count] is the number of occurrences of an occupation in OCCUPATIONS and [occupation] is the lowercase occupation name. If more than one Occupation has the same [occupation_count], they should be ordered alphabetically.

Note: There will be at least two entries in the table for each type of occupation.

제출 답 >>>

select concat(name, '(', left(occupation,1), ')') from occupations order by name;

select "There are a total of ",count(occupation), concat( LOWER(occupation), "s.") 
from occupations 
group by occupation 
order by count(occupation), occupation  


------------------------------
중요!!!!! 

문제) Occupations 

Pivot the Occupation column in OCCUPATIONS so that each Name is sorted alphabetically and displayed underneath its corresponding Occupation. The output column headers should be Doctor, Professor, Singer, and Actor, respectively.

Note: Print NULL when there are no more names corresponding to an occupation.

Input Format

The OCCUPATIONS table is described as follows: Occupation will only contain one of the following values: Doctor, Professor, Singer or Actor.


Sample Output
	Jenny    Ashley     Meera  Jane
	Samantha Christeen  Priya  Julia
	NULL     Ketty      NULL   Maria

Explanation
	The first column is an alphabetically ordered list of Doctor names. 
	The second column is an alphabetically ordered list of Professor names. 
	The third column is an alphabetically ordered list of Singer names. 
	The fourth column is an alphabetically ordered list of Actor names. 
	The empty cell data for columns with less than the maximum number of names per occupation (in this case, the Professor and Actor columns) are filled with NULL values.


nice code >>>

set @r1=0, @r2=0, @r3=0, @r4=0;
select min(Doctor), min(Professor), min(Singer), min(Actor)
from(
  select case when Occupation='Doctor' then (@r1:=@r1+1)
            when Occupation='Professor' then (@r2:=@r2+1)
            when Occupation='Singer' then (@r3:=@r3+1)
            when Occupation='Actor' then (@r4:=@r4+1) end as RowNumber,
    case when Occupation='Doctor' then Name end as Doctor,
    case when Occupation='Professor' then Name end as Professor,
    case when Occupation='Singer' then Name end as Singer,
    case when Occupation='Actor' then Name end as Actor
  from OCCUPATIONS
  order by Name
) Temp
group by RowNumber;


------------------------------

문제) Binary Tree Nodes 

You are given a table, BST, containing two columns: N and P, where N represents the value of a node in Binary Tree, and P is the parent of N.

Write a query to find the node type of Binary Tree ordered by the value of the node. Output one of the following for each node:

	Root: If node is root node.
	Leaf: If node is leaf node.
	Inner: If node is neither root nor leaf node.

Sample Output

	1 Leaf
	2 Inner
	3 Leaf
	5 Root
	6 Leaf
	8 Inner
	9 Leaf

제출 답 >>>
select N, 
case 
    when P is NULL then "Root" 
    when N in (SELECT P FROM BST) then "Inner"
    else  "Leaf"
end 
from BST
order by N

------------------------------

문제) New Companies

Amber's conglomerate corporation just acquired some new companies. Each of the companies follows this hierarchy: 

Given the table schemas below, write a query to print the company_code, founder name, total number of lead managers, total number of senior managers, total number of managers, and total number of employees. Order your output by ascending company_code.

Note:

The tables may contain duplicate records.
The company_code is string, so the sorting should not be numeric. For example, if the company_codes are C_1, C_2, and C_10, then the ascending company_codes will be C_1, C_10, and C_2.

Sample Output

	C1 Monika 1 2 1 2
	C2 Samantha 1 1 2 2

Explanation

	In company C1, the only lead manager is LM1. There are two senior managers, SM1 and SM2, under LM1. There is one manager, M1, under senior manager SM1. There are two employees, E1 and E2, under manager M1.

	In company C2, the only lead manager is LM2. There is one senior manager, SM3, under LM2. There are two managers, M2 and M3, under senior manager SM3. There is one employee, E3, under manager M2, and another employee, E4, under manager, M3.

제출 답 >>>

select 
c.company_code, c.founder, 
    (select count(distinct l.lead_manager_code) from Lead_Manager l where c.company_code = l.company_code),
    (select count(distinct s.senior_manager_code) from Senior_Manager s where c.company_code = s.company_code),
    (select count(distinct m.manager_code) from Manager m where c.company_code = m.company_code),
    (select count(distinct e.employee_code) from Employee e where c.company_code = e.company_code)
from Company c
order by c.company_code
